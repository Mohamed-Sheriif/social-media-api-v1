// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                @id @default(autoincrement())
  username               String             @unique
  email                  String             @unique
  password               String             @map("password_hash")
  fullName               String?            @map("full_name")
  bio                    String?
  avatarUrl              String?            @map("avatar_url")
  isVerified             Boolean?           @default(false) @map("is_verified")
  passwordResetCode      String?            @map("password_reset_code")
  passwordResetExpires   DateTime?          @map("password_reset_code_expiry")
  passwordResetVerified  Boolean?           @map("password_reset_verified")
  twoFAEnabled           Boolean?           @default(false) @map("two_fa_enabled")
  twoFASecret            String?            @map("two_fa_secret")
  createdAt              DateTime           @default(now()) @map("created_at")
  updatedAt              DateTime           @updatedAt @map("updated_at")
  Post                   Post[]
  Comment                Comment[]
  Like                   Like[]
  userRefreshToken       userRefreshToken[]
  userInvalidTokens      userInvalidToken[]
  sentFriendRequests     Friendship[]       @relation("FriendRequester")
  receivedFriendRequests Friendship[]       @relation("FriendAddressee")
  GroupMembership        GroupMembership[]
  GroupPost              GroupPost[]

  @@index([username], name: "idx_username")
  @@index([email], name: "idx_email")
  @@map("users")
}

model userRefreshToken {
  userId       Int      @map("user_id")
  refreshToken String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@id([userId, refreshToken])
  @@map("user_refresh_tokens")
}

model userInvalidToken {
  userId         Int      @map("user_id")
  accessToken    String
  expirationTime String   @map("expiration_time")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@id([userId, accessToken])
  @@map("user_invalid_tokens")
}

model Post {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  content   String
  mediaUrl  String?  @map("media_url")
  isPublic  Boolean  @map("is_public")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user    User      @relation(fields: [userId], references: [id])
  Comment Comment[]
  Like    Like[]

  @@index([userId], name: "idx_user_id")
  @@index([createdAt], name: "idx_created_at")
  @@map("posts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  postId    Int      @map("post_id")
  parentId  Int?     @map("parent_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  // Self-relation for nested comments
  parent  Comment?  @relation("CommentToReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("CommentToReplies")

  @@index([postId], name: "idx_post_id")
  @@index([parentId], name: "idx_parent_id")
  @@map("comments")
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  postId    Int      @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@map("likes")
}

model Friendship {
  id          Int      @id @default(autoincrement())
  requesterId Int      @map("requester_id")
  addresseeId Int      @map("addressee_id")
  status      String   @default("pending") // "pending" | "accepted" 
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  requester User @relation("FriendRequester", fields: [requesterId], references: [id])
  addressee User @relation("FriendAddressee", fields: [addresseeId], references: [id])

  @@unique([requesterId, addresseeId]) // prevent duplicate requests
  @@map("friendships")
}

model Group {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  memberships GroupMembership[]
  posts       GroupPost[]
}

model GroupMembership {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  groupId   Int      @map("group_id")
  role      String   @default("member") // "member" | "admin"
  status    String   @default("pending") // "pending" | "approved" | "declined"
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
  @@map("group_memberships")
}

model GroupPost {
  id        Int      @id @default(autoincrement())
  groupId   Int      @map("group_id")
  userId    Int      @map("user_id")
  content   String
  mediaUrl  String?  @map("media_url")
  status    String   @default("pending") // "pending" | "approved" | "declined"
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@index([groupId])
  @@map("group_posts")
}
